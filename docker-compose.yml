# yaml-language-server: $schema=https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json
name: "docs"

# https://hub.docker.com/_/traefik
x-traefik-image: &traefik-image "docker.io/traefik:2.10"
# https://hub.docker.com/r/gristlabs/grist
x-grist-image: &grist-image "docker.io/gristlabs/grist:1.1.10"
# https://hub.docker.com/r/dexidp/dex
# was: x-dex-image: &dex-image "docker.io/dexidp/dex:v2.37.0"
x-dex-image: &dex-image "ghcr.io/ict-vvf-genova/dex-smtp:master"
# https://hub.docker.com/r/minio/minio
x-minio-image: &minio-image "docker.io/minio/minio:RELEASE.2024-01-18T22-51-28Z"
# https://hub.docker.com/r/minio/mc
x-minio-mc-image: &minio-mc-image "docker.io/minio/mc:RELEASE.2024-01-18T07-03-39Z"
# https://hub.docker.com/_/redis
x-redis-image: &redis-image "docker.io/redis:7-bookworm"

services:

  traefik:
    image: *traefik-image
    restart: "always"
    container_name: "docs-traefik"
    hostname: "traefik"
    networks:
      public:
      private:
        aliases:
          - "${GRIST_DOMAIN:?}"
          - "${DEX_DOMAIN:?}"
          - "${MINIO_DOMAIN:?}"
          - "${TRAEFIK_DOMAIN:?}"
    ports:
      - "80:80/tcp" # HTTP.
      - "443:443/tcp" # HTTPS.
      - "443:443/udp" # HTTPS (QUIC).
    volumes:
      - "./config/traefik/traefik.yml:/etc/traefik/traefik.yml:ro"
      - "./config/traefik/dynamic/:/etc/traefik/dynamic/:ro"
      - "./config/traefik/certs/server/:/etc/traefik/certs/:ro"
      - "./data/traefik/acme:/etc/traefik/acme/:Z"
    environment:
      TRAEFIK_BASIC_AUTH: "${TRAEFIK_BASIC_AUTH:?}"
      TRAEFIK_TLS_RESOLVER: "${TRAEFIK_TLS_RESOLVER:-}"
      TRAEFIK_TLS_KEY: "${TRAEFIK_TLS_KEY:-}"
      TRAEFIK_TLS_CERT: "${TRAEFIK_TLS_CERT:-}"
      TRAEFIK_MTLS_CERTS: "${TRAEFIK_MTLS_CERTS:-}"
      GRIST_DOMAIN: "${GRIST_DOMAIN:?}"
      DEX_DOMAIN: "${DEX_DOMAIN:?}"
      MINIO_DOMAIN: "${MINIO_DOMAIN:?}"
      TRAEFIK_DOMAIN: "${TRAEFIK_DOMAIN:?}"
      CF_DNS_API_TOKEN: "${CF_DNS_API_TOKEN:-}"
      CF_ZONE_API_TOKEN: "${CF_ZONE_API_TOKEN:-}"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      start_period: "5m"
      interval: "10s"
      timeout: "5s"
      retries: 2

  grist:
    image: *grist-image
    restart: "always"
    container_name: "docs-grist"
    hostname: "grist"
    networks:
      - "private"
    volumes:
      - "./config/grist/static/custom.css:/grist/static/custom.css:ro"
      - "./data/grist/persist/:/persist/:Z"
    environment:
      APP_HOME_URL: "https://${GRIST_DOMAIN:?}"
      APP_DOC_URL: "https://${GRIST_DOMAIN:?}"
      APP_STATIC_URL: "https://${GRIST_DOMAIN:?}"
      APP_STATIC_INCLUDE_CUSTOM_CSS: "true"
      GRIST_DOMAIN: "${GRIST_DOMAIN:?}"
      GRIST_SINGLE_ORG: "${GRIST_SINGLE_ORG:-}"
      GRIST_ORG_IN_PATH: "${GRIST_ORG_IN_PATH:-true}"
      GRIST_DEFAULT_EMAIL: "${GRIST_DEFAULT_EMAIL:?}"
      GRIST_SUPPORT_EMAIL: "${GRIST_SUPPORT_EMAIL:-support@${GRIST_DOMAIN:?}}"
      GRIST_SESSION_COOKIE: "${GRIST_SESSION_COOKIE:-grist_session}"
      GRIST_SESSION_SECRET: "${GRIST_SESSION_SECRET:?}"
      COOKIE_MAX_AGE: "${COOKIE_MAX_AGE:-none}"
      GRIST_FORCE_LOGIN: "${GRIST_FORCE_LOGIN:-true}"
      GRIST_SUPPORT_ANON: "${GRIST_SUPPORT_ANON:-false}"
      GRIST_DEFAULT_PRODUCT: "${GRIST_DEFAULT_PRODUCT:-Free}"
      GRIST_HIDE_UI_ELEMENTS: "${GRIST_HIDE_UI_ELEMENTS:-helpCenter,billing,templates,multiAccounts,sendToDrive,tutorials}"
      GRIST_LIST_PUBLIC_SITES: "${GRIST_LIST_PUBLIC_SITES:-false}"
      GRIST_MAX_UPLOAD_ATTACHMENT_MB: "${GRIST_MAX_UPLOAD_ATTACHMENT_MB:-100}"
      GRIST_MAX_UPLOAD_IMPORT_MB: "${GRIST_MAX_UPLOAD_IMPORT_MB:-500}"
      GRIST_PAGE_TITLE_SUFFIX: "${GRIST_PAGE_TITLE_SUFFIX:-_blank}"
      GRIST_WIDGET_LIST_URL: "${GRIST_WIDGET_LIST_URL:-https://github.com/gristlabs/grist-widget/releases/download/latest/manifest.json}"
      GRIST_EXPERIMENTAL_PLUGINS: "${GRIST_EXPERIMENTAL_PLUGINS:-1}"
      GRIST_TELEMETRY_LEVEL: "${GRIST_TELEMETRY_LEVEL:-off}"
      GRIST_THROTTLE_CPU: "${GRIST_THROTTLE_CPU:-true}"
      GRIST_SANDBOX_FLAVOR: "${GRIST_SANDBOX_FLAVOR:-gvisor}"
      PYTHON_VERSION: "${PYTHON_VERSION:-3}"
      PYTHON_VERSION_ON_CREATION: "${PYTHON_VERSION_ON_CREATION:-3}"
      GRIST_OIDC_IDP_ISSUER: "https://${DEX_DOMAIN:?}/dex/.well-known/openid-configuration"
      GRIST_OIDC_IDP_CLIENT_ID: "grist"
      GRIST_OIDC_IDP_CLIENT_SECRET: "${GRIST_OAUTH_CLIENT_SECRET:?}"
      GRIST_OIDC_IDP_SCOPES: "openid email profile"
      GRIST_OIDC_IDP_SKIP_END_SESSION_ENDPOINT: "true"
      GRIST_DOCS_MINIO_ENDPOINT: "minio"
      GRIST_DOCS_MINIO_PORT: "9000"
      GRIST_DOCS_MINIO_USE_SSL: "0"
      GRIST_DOCS_MINIO_BUCKET: "grist"
      GRIST_DOCS_MINIO_ACCESS_KEY: "grist"
      GRIST_DOCS_MINIO_SECRET_KEY: "${MINIO_GRIST_PASSWORD:?}"
      TYPEORM_TYPE: "sqlite"
      TYPEORM_DATABASE: "/persist/home.sqlite3"
      REDIS_URL: "redis://:${REDIS_GRIST_PASSWORD:?}@redis-grist:6379/1"
      ASSISTANT_API_KEY: "${ASSISTANT_API_KEY:-}"
      ASSISTANT_CHAT_COMPLETION_ENDPOINT: "${ASSISTANT_CHAT_COMPLETION_ENDPOINT:-}"
      ASSISTANT_MODEL: "${ASSISTANT_MODEL:-}"
      ASSISTANT_LONGER_CONTEXT_MODEL: "${ASSISTANT_LONGER_CONTEXT_MODEL:-}"
      ASSISTANT_MAX_TOKENS: "${ASSISTANT_MAX_TOKENS:-}"
      OPENAI_API_KEY: "${OPENAI_API_KEY:-}"
      HUGGINGFACE_API_KEY: "${HUGGINGFACE_API_KEY:-}"
      COMPLETION_MODEL: "${COMPLETION_MODEL:-}"
      COMPLETION_URL: "${COMPLETION_URL:-}"
      # Set to "0" to disable certificate validation.
      # WARNING, changing this value is unsafe and should only be used for testing purposes.
      NODE_TLS_REJECT_UNAUTHORIZED: "${GRIST_NODE_TLS_REJECT_UNAUTHORIZED:-0}"
    healthcheck:
      test: ["CMD", "bash", "-euc", ">/dev/tcp/localhost/8484"]
      start_period: "5m"
      interval: "10s"
      timeout: "5s"
      retries: 2
    depends_on:
      dex:
        condition: "service_healthy"
      minio:
        condition: "service_healthy"
      minio-init:
        condition: "service_completed_successfully"
      redis-grist:
        condition: "service_healthy"

  dex:
    image: *dex-image
    restart: "always"
    container_name: "docs-dex"
    hostname: "dex"
    networks:
      - "public"
      - "private"
    volumes:
      - "./config/dex/config.yaml:/etc/dex/config.yaml:ro"
    environment:
      DEX_DOMAIN: "${DEX_DOMAIN:?}"
      DEX_SMTP_NAME: "${DEX_SMTP_NAME:?}"
      DEX_SMTP_ID: "${DEX_SMTP_ID:?}"
      DEX_SMTP_HOST: "${DEX_SMTP_HOST:?}"
      DEX_SMTP_DOMAIN: "${DEX_SMTP_DOMAIN:?}"
      DEX_SMTP_LABEL: "${DEX_SMTP_LABEL:?}"
      DEX_ADMIN: "${DEX_ADMIN:?}"
      DEX_ADMIN_USER_EMAIL: "${DEX_ADMIN_USER_EMAIL:?}"
      DEX_ADMIN_USER_PASSWORD_HASH: "${DEX_ADMIN_USER_PASSWORD_HASH:?}"
      GRIST_DOMAIN: "${GRIST_DOMAIN:?}"
      GRIST_OAUTH_CLIENT_SECRET: "${GRIST_OAUTH_CLIENT_SECRET:?}"
      MINIO_DOMAIN: "${MINIO_DOMAIN:?}"
    command: ["dex", "serve", "/etc/dex/config.yaml"]
    healthcheck:
      test: ["CMD", "wget", "-qO", "/dev/null", "http://localhost:5556/dex/healthz"]
      start_period: "5m"
      interval: "10s"
      timeout: "5s"
      retries: 2

  minio:
    image: *minio-image
    restart: "always"
    container_name: "docs-minio"
    hostname: "minio"
    networks:
      - "private"
    volumes:
      - "./data/minio/:/data/:Z"
    environment:
      MINIO_ROOT_USER: "minio"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD:?}"
      MINIO_VOLUMES: "/data/"
      MINIO_BROWSER: "on"
      MINIO_BROWSER_REDIRECT_URL: "https://${MINIO_DOMAIN:?}/console/"
    command: ["server", "--address", ":9000", "--console-address", ":9001"]
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      start_period: "5m"
      interval: "10s"
      timeout: "5s"
      retries: 2

  minio-init:
    image: *minio-mc-image
    restart: "on-failure"
    container_name: "docs-minio-init"
    hostname: "minio-init"
    networks:
      - "private"
    volumes:
      - "./config/minio/init.sh:/init.sh:ro"
      - "./config/minio/policies/:/policies/:ro"
    environment:
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD:?}"
      MINIO_GRIST_PASSWORD: "${MINIO_GRIST_PASSWORD:?}"
    entrypoint: "/init.sh"
    depends_on:
      minio:
        condition: "service_healthy"

  redis-grist:
    image: *redis-image
    restart: "always"
    container_name: "docs-redis-grist"
    hostname: "redis-grist"
    networks:
      - "private"
    volumes:
      - "./config/redis/redis.conf.sh:/etc/redis/redis.conf.sh:ro"
      - "./data/redis-grist/:/data/:Z"
    environment:
      REDISCLI_AUTH: "${REDIS_GRIST_PASSWORD:?}"
    command: ["sh", "-euc", "sh /etc/redis/redis.conf.sh | exec redis-server -"]
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep -q PONG"]
      start_period: "5m"
      interval: "10s"
      timeout: "5s"
      retries: 2

networks:

  public:
    name: "docs-public"
    internal: false

  private:
    name: "docs-private"
    internal: true

